{"version":3,"file":"static/js/435.150ccb6f.chunk.js","mappings":"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","sources":["redux/selector.js","components/PhoneForm/Phone.styled.jsx","components/PhoneForm/PhoneForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/ContactsFilter.jsx","components/Contacts/Contact.styled.jsx","components/Contacts/NewContact.jsx","components/Contacts/ContactList.jsx","pages/Contscts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const contactsFiltered = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Form as FormikForm } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const Form = styled(FormikForm)`\n  background: #7fc27f;\n  color: white;\n  font-size: 1.5rem;\n  list-style-type: none;\n  text-align: center;\n  padding: 12px 18px;\n  max-width: 650px;\n  margin: 0 auto;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 2px 0px;\n`;\n\nexport const AddButton = styled.button`\n  width: 100px;\n  color: #5a5a5a;\n  background-color: #fafafa;\n  border-radius: 10px;\n  border: none;\n  height: 30px;\n  margin-left: 20px;\n  :hover {\n    box-shadow: 0 5px 10px 2px rgb(0 0 0 / 25%);\n  }\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContacts } from 'redux/operation';\nimport { selectContacts } from 'redux/selector';\nimport { nanoid } from 'nanoid';\nimport { PropTypes } from 'prop-types';\nimport { Formik } from 'formik';\nimport { Form, AddButton } from './Phone.styled';\n\nexport default function PhoneForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contact = {\n      name: e.currentTarget.elements.name.value,\n      number: e.currentTarget.elements.number.value,\n    };\n\n    const currentName = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (currentName) {\n      console.log(currentName);\n      alert(`${currentName.name} is already exist!`);\n      return;\n    }\n\n    dispatch(addContacts(contact));\n\n    e.target.reset();\n  };\n\n  return (\n    <Formik>\n      <Form onSubmit={handleSubmit} name=\"contact\">\n        <label htmlFor={nameId}>\n          Name\n          <input\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label htmlFor={numberId}>\n          Number\n          <input\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </Form>\n    </Formik>\n  );\n}\n\nPhoneForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n// class PhoneForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//   }\n// }\n\n// export default PhoneForm;\n","import styled from '@emotion/styled';\n\nexport const FilterForm = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  background: #7fc27f;\n  color: white;\n  font-size: 1rem;\n  list-style-type: none;\n  text-align: center;\n  padding: 12px 18px;\n  max-width: 650px;\n  margin: auto;\n  margin-bottom: 20px;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 2px 0px;\n`;\n","import { PropTypes } from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setNameFilter } from 'redux/filterSlice';\nimport { nanoid } from 'nanoid';\nimport { FilterForm } from './Filter.styled';\n\nconst ContactFilter = () => {\n  const filterId = nanoid();\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => {\n    const value = e.target.value;\n    dispatch(setNameFilter(value));\n  };\n\n  return (\n    <FilterForm>\n      <label htmlFor={filterId}>Find contacts by name</label>\n      <input\n        type=\"text\"\n        id={filterId}\n        onChange={onFilterChange}\n        name=\"filter\"\n      />\n    </FilterForm>\n  );\n};\n\nContactFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ContactFilter;\n","import styled from '@emotion/styled';\n\nexport const PhoneBook = styled.ul`\n  background: #aaacaa;\n  color: white;\n  font-size: 1rem;\n  list-style-type: none;\n  text-align: center;\n  padding: 12px 18px;\n  max-width: 650px;\n  margin: 0 auto;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 2px 0px;\n`;\n\nexport const NewContact = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 10px;\n`;\n\nexport const DelButton = styled.button`\n  width: 80px;\n  color: #5a5a5a;\n  background-color: #fafafa;\n  border-radius: 10px;\n  border: none;\n  height: 30px;\n  margin-left: 10px;\n  margin-top: 10px;\n  :hover {\n    box-shadow: 0 5px 10px 2px rgb(0 0 0 / 25%);\n  }\n`;\n","import React from 'react';\nimport { removeContacts } from 'redux/operation';\nimport { PropTypes } from 'prop-types';\nimport { DelButton } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <span key={id}>\n      {name}: {number}\n      <DelButton type=\"button\" onClick={() => dispatch(removeContacts(id))}>\n        Delete\n      </DelButton>\n    </span>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { PropTypes } from 'prop-types';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { contactsFiltered, selectIsLoading, selectError } from 'redux/selector';\nimport { fetchContacts } from 'redux/operation';\nimport { PhoneBook, NewContact } from './Contact.styled';\nimport { Contact } from './NewContact';\nimport Loader from '../Loader/Loader';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsFiltered);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // if (!contacts) return null;\n\n  return (\n    <>\n      {!isLoading && !error ? (\n        <PhoneBook>\n          {contacts.map(({ id, name, number }) => (\n            <NewContact key={id}>\n              <Contact id={id} name={name} number={number}></Contact>\n            </NewContact>\n          ))}\n        </PhoneBook>\n      ) : (\n        <Loader></Loader>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n\n// export const ContactList = ({ items, onDelete }) => (\n//   <PhoneBook>\n//     {items.map(({ id, name, number }) => (\n//       <NewContact key={id}>\n//         {name}: {number}\n//         <DelButton type=\"button\" onClick={() => onDelete(id)}>\n//           Delete\n//         </DelButton>\n//       </NewContact>\n//     ))}\n//   </PhoneBook>\n// );\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operation';\n// import { getError, getIsLoading } from 'redux/selector.js';\nimport PhoneForm from '../components/PhoneForm/PhoneForm';\nimport Section from '../components/Section/Section';\nimport ContactFilter from '../components/Filter/ContactsFilter';\nimport ContactList from '../components/Contacts/ContactList';\n\nconst Contscts = () => {\n  const dispatch = useDispatch();\n  //   const isLoading = useSelector(getIsLoading);\n  // const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <PhoneForm />\n        {/* {isLoading && !error && <b>Request in progress...</b>} */}\n      </Section>\n      <Section title=\"Contacts\">\n        <ContactFilter />\n\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default Contscts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","contactsFiltered","createSelector","filter","contact","name","toLowerCase","includes","Form","styled","FormikForm","AddButton","PhoneForm","useSelector","dispatch","useDispatch","nameId","nanoid","numberId","onSubmit","e","preventDefault","currentTarget","elements","value","number","currentName","find","console","log","alert","addContacts","target","reset","htmlFor","id","type","pattern","title","required","FilterForm","filterId","onChange","setNameFilter","PhoneBook","NewContact","DelButton","Contact","onClick","removeContacts","useEffect","fetchContacts","Loader","map","Section"],"sourceRoot":""}
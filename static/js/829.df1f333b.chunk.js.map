{"version":3,"file":"static/js/829.df1f333b.chunk.js","mappings":"yRAGaA,GAAWC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,iNAaRE,EAAaF,EAAAA,EAAAA,OAAH,maAsBVG,EAAaH,EAAAA,EAAAA,MAAH,8FAMVI,EAAYJ,EAAAA,EAAAA,MAAH,wT,qGC1ClBK,EAAY,YAgFT,IAAIC,EAAuB,SAA8BC,EAAGC,GACjE,OAAOD,IAAMC,CACd,EAqBM,SAASC,EAAeC,EAAMC,GACnC,IAAIC,EAAoD,kBAA3BD,EAAsCA,EAAyB,CAC1FE,cAAeF,GAEbG,EAAwBF,EAAgBC,cACxCA,OAA0C,IAA1BC,EAAmCR,EAAuBQ,EAC1EC,EAAwBH,EAAgBI,QACxCA,OAAoC,IAA1BD,EAAmC,EAAIA,EACjDE,EAAsBL,EAAgBK,oBACtCC,EA7BC,SAAkCL,GACvC,OAAO,SAAoCM,EAAMC,GAC/C,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAMT,IAFA,IAAIA,EAASF,EAAKE,OAETC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKT,EAAcM,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,CACR,CACF,CAYkBC,CAAyBV,GACtCW,EAAoB,IAAZR,EA/Gd,SAA8BS,GAC5B,IAAIC,EACJ,MAAO,CACLC,IAAK,SAAaC,GAChB,OAAIF,GAASD,EAAOC,EAAME,IAAKA,GACtBF,EAAMG,MAGRxB,CACR,EACDyB,IAAK,SAAaF,EAAKC,GACrBH,EAAQ,CACNE,IAAKA,EACLC,MAAOA,EAEV,EACDE,WAAY,WACV,OAAOL,EAAQ,CAACA,GAAS,EAC1B,EACDM,MAAO,WACLN,OAAQO,CACT,EAEJ,CAwF6BC,CAAqBhB,GAtFnD,SAAwBF,EAASS,GAC/B,IAAIU,EAAU,GAEd,SAASR,EAAIC,GACX,IAAIQ,EAAaD,EAAQE,WAAU,SAAUX,GAC3C,OAAOD,EAAOG,EAAKF,EAAME,IAC1B,IAED,GAAIQ,GAAc,EAAG,CACnB,IAAIV,EAAQS,EAAQC,GAOpB,OALIA,EAAa,IACfD,EAAQG,OAAOF,EAAY,GAC3BD,EAAQI,QAAQb,IAGXA,EAAMG,KACd,CAGD,OAAOxB,CACR,CAwBD,MAAO,CACLsB,IAAKA,EACLG,IAxBF,SAAaF,EAAKC,GACZF,EAAIC,KAASvB,IAEf8B,EAAQI,QAAQ,CACdX,IAAKA,EACLC,MAAOA,IAGLM,EAAQd,OAASL,GACnBmB,EAAQK,MAGb,EAaCT,WAXF,WACE,OAAOI,CACR,EAUCH,MARF,WACEG,EAAU,EACX,EAQF,CAmCgEM,CAAezB,EAASE,GAEvF,SAASwB,IACP,IAAIb,EAAQL,EAAMG,IAAIgB,WAEtB,GAAId,IAAUxB,EAAW,CAIvB,GAFAwB,EAAQnB,EAAKkC,MAAM,KAAMD,WAErB1B,EAAqB,CACvB,IAAIkB,EAAUX,EAAMO,aAChBc,EAAgBV,EAAQW,MAAK,SAAUpB,GACzC,OAAOT,EAAoBS,EAAMG,MAAOA,EACzC,IAEGgB,IACFhB,EAAQgB,EAAchB,MAEzB,CAEDL,EAAMM,IAAIa,UAAWd,EACtB,CAED,OAAOA,CACR,CAMD,OAJAa,EAASK,WAAa,WACpB,OAAOvB,EAAMQ,OACd,EAEMU,CACR,CC/ID,SAASM,EAAgBC,GACvB,IAAIC,EAAeC,MAAMC,QAAQH,EAAM,IAAMA,EAAM,GAAKA,EAExD,IAAKC,EAAaG,OAAM,SAAUC,GAChC,MAAsB,oBAARA,CACf,IAAG,CACF,IAAIC,EAAkBL,EAAaM,KAAI,SAAUF,GAC/C,MAAsB,oBAARA,EAAqB,aAAeA,EAAIG,MAAQ,WAAa,YAAcH,CAC1F,IAAEI,KAAK,MACR,MAAM,IAAIC,MAAM,kGAAoGJ,EAAkB,IACvI,CAED,OAAOL,CACR,CAEM,SAASU,EAAsBC,GACpC,IAAK,IAAIC,EAAOnB,UAAUtB,OAAQ0C,EAAyB,IAAIZ,MAAMW,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IACpHD,EAAuBC,EAAO,GAAKrB,UAAUqB,GAG/C,IAAIC,EAAiB,WACnB,IAAK,IAAIC,EAAQvB,UAAUtB,OAAQ4B,EAAQ,IAAIE,MAAMe,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACrFlB,EAAMkB,GAASxB,UAAUwB,GAG3B,IAEIC,EAFAC,EAAkB,EAOlBC,EAAwB,CAC1BC,oBAAgBtC,GAGduC,EAAavB,EAAMT,MAQvB,GAN0B,kBAAfgC,IACTF,EAAwBE,EAExBA,EAAavB,EAAMT,OAGK,oBAAfgC,EACT,MAAM,IAAIb,MAAM,qFAAuFa,EAAa,KAKtH,IAAIC,EAAwBH,EACxBI,EAAyBD,EAAsBF,eAC/CA,OAA4C,IAA3BG,EAAoCX,EAAyBW,EAM9EC,EAAsBxB,MAAMC,QAAQmB,GAAkBA,EAAiB,CAACA,GACxErB,EAAeF,EAAgBC,GAC/B2B,EAAqBf,EAAQjB,WAAM,EAAQ,CAAC,WAG9C,OAFAyB,IAEOG,EAAW5B,MAAM,KAAMD,UAC/B,GAAEkC,OAAOF,IAENG,EAAWjB,GAAQ,WAIrB,IAHA,IAAIkB,EAAS,GACT1D,EAAS6B,EAAa7B,OAEjBC,EAAI,EAAGA,EAAID,EAAQC,IAG1ByD,EAAOC,KAAK9B,EAAa5B,GAAGsB,MAAM,KAAMD,YAK1C,OADAyB,EAAcQ,EAAmBhC,MAAM,KAAMmC,EAE9C,IAeD,OAdAE,OAAOC,OAAOJ,EAAU,CACtBN,WAAYA,EACZI,mBAAoBA,EACpB1B,aAAcA,EACdiC,WAAY,WACV,OAAOf,CACR,EACDgB,eAAgB,WACd,OAAOf,CACR,EACDgB,oBAAqB,WACnB,OAAOhB,EAAkB,CAC1B,IAEIS,CACR,EAGD,OAAOb,CACR,CACM,I,MAAIA,EAAgCL,EAAsBnD,GCrGpD6E,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EACvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAGnBC,EAAmB7B,EAC9B,CAACqB,EAHyB,SAAAC,GAAK,OAAIA,EAAMQ,MAAV,IAI/B,SAACP,EAAUO,GACT,OAAOP,EAASO,QAAO,SAAAC,GAAO,OAC5BA,EAAQvC,KAAKwC,cAAcC,SAASH,EAAOE,cADf,GAG/B,ICMQE,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,6BChBPG,GAAY7G,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,qVAcT8G,EAAY9G,EAAAA,EAAAA,OAAH,6T,oBCPP,SAAS+G,IACtB,IAAMvB,GAAWwB,EAAAA,EAAAA,IAAY1B,GACvB2B,GAAWC,EAAAA,EAAAA,MAEXC,EAAShB,IACTiB,EAAWjB,IAyBjB,OACE,SAAC,KAAD,WACE,UAACU,EAAD,CAAWQ,SAzBM,SAAAC,GACnBA,EAAEC,iBAEF,IAAMvB,EAAU,CACdvC,KAAM6D,EAAEE,cAAcC,SAAShE,KAAK5B,MACpC6F,OAAQJ,EAAEE,cAAcC,SAASC,OAAO7F,OAGpC8F,EAAcnC,EAAS1C,MAC3B,qBAAGW,KAAgBwC,gBAAkBD,EAAQvC,KAAKwC,aAAlD,IAGF,GAAI0B,EAGF,OAFAC,QAAQC,IAAIF,QACZG,MAAM,GAAD,OAAIH,EAAYlE,KAAhB,uBAIPwD,GAASc,EAAAA,EAAAA,IAAY/B,IAErBsB,EAAEU,OAAOC,OACV,EAIsCxE,KAAK,UAAxC,WACE,UAAC,KAAD,CAAYyE,QAASf,EAArB,kBAEE,SAAC,KAAD,CACEV,GAAIU,EACJgB,KAAK,OACL1E,KAAK,OACL2E,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,QAGZ,UAAC,KAAD,CAAYJ,QAASd,EAArB,oBAEE,SAAC,KAAD,CACEX,GAAIW,EACJe,KAAK,MACL1E,KAAK,SACL2E,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,QAGZ,SAACxB,EAAD,CAAWqB,KAAK,SAAhB,6BAIP,CCnEM,I,UAAMI,EAAgBvI,EAAAA,EAAAA,GAAH,qICc1B,EAbgB,SAAC,GAAyB,IAAvBqI,EAAsB,EAAtBA,MAAOG,EAAe,EAAfA,SACxB,OACE,gCACE,SAACD,EAAD,UAAgBF,IACfG,IAGN,E,UCRYC,EAAazI,EAAAA,EAAAA,IAAH,2WAeV0I,EAAc1I,EAAAA,EAAAA,MAAH,8SCiBxB,EA1BsB,WACpB,IAAM2I,EAAWxC,IACXc,GAAWC,EAAAA,EAAAA,MAOjB,OACE,UAACuB,EAAD,YACE,kBAAOP,QAASS,EAAhB,oCACA,SAACD,EAAD,CACEP,KAAK,OACL1B,GAAIkC,EACJC,SAXiB,SAAAtB,GACrB,IAAMzF,EAAQyF,EAAEU,OAAOnG,MACvBoF,GAAS4B,EAAAA,EAAAA,GAAchH,GACxB,EASK4B,KAAK,aAIZ,EC1BYqF,EAAY9I,EAAAA,EAAAA,GAAH,2TAcT+I,EAAa/I,EAAAA,EAAAA,GAAH,kHAOVgJ,EAAYhJ,EAAAA,EAAAA,OAAH,md,UCjBTiJ,EAAU,SAAC,GAA0B,IAAxBxC,EAAuB,EAAvBA,GAAIhD,EAAmB,EAAnBA,KAAMiE,EAAa,EAAbA,OAC5BT,GAAWC,EAAAA,EAAAA,MACjB,OACE,4BACGzD,EADH,KACWiE,GACT,SAACsB,EAAD,CAAWb,KAAK,SAASe,QAAS,kBAAMjC,GAASkC,EAAAA,EAAAA,IAAe1C,GAA9B,EAAlC,sBAFSA,EAOd,EC8BD,EApC2B,WACzB,IAAMQ,GAAWC,EAAAA,EAAAA,MAEX1B,GAAWwB,EAAAA,EAAAA,IAAYlB,GACvBH,GAAYqB,EAAAA,EAAAA,IAAYtB,GACxBG,GAAQmB,EAAAA,EAAAA,IAAYpB,GAM1B,OAJAwD,EAAAA,EAAAA,YAAU,WACRnC,GAASoC,EAAAA,EAAAA,MACV,GAAE,CAACpC,KAGF,8BACItB,GAAcE,GASd,SAACyD,EAAA,EAAD,KARA,SAACR,EAAD,UACGtD,EAAShC,KAAI,gBAAGiD,EAAH,EAAGA,GAAIhD,EAAP,EAAOA,KAAMiE,EAAb,EAAaA,OAAb,OACZ,SAACqB,EAAD,WACE,SAACE,EAAD,CAASxC,GAAIA,EAAIhD,KAAMA,EAAMiE,OAAQA,KADtBjB,EADL,OAWvB,ECJD,EAvBiB,WACf,IAAMQ,GAAWC,EAAAA,EAAAA,MAQjB,OAJAkC,EAAAA,EAAAA,YAAU,WACRnC,GAASoC,EAAAA,EAAAA,MACV,GAAE,CAACpC,KAGF,UAAC,EAAD,YACE,gBAAKoB,MAAM,YAAX,UACE,SAACtB,EAAD,OAGF,iBAAKsB,MAAM,WAAX,WACE,SAAC,EAAD,KACA,SAAC,EAAD,SAIP,C","sources":["components/authForms/authForms.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selector.js","../node_modules/nanoid/index.browser.js","components/PhoneForm/Phone.styled.jsx","components/PhoneForm/PhoneForm.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Filter/Filter.styled.jsx","components/Filter/ContactsFilter.jsx","components/Contacts/Contact.styled.jsx","components/Contacts/NewContact.jsx","components/Contacts/ContactList.jsx","pages/Contscts.jsx"],"sourcesContent":["import { Form as FormikForm } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const FormUser = styled(FormikForm)`\n  color: black;\n  font-size: 1.5rem;\n  list-style-type: none;\n  \n  padding: 12px 18px;\n  max-width: 650px;\n  margin: 0 auto;\n  border-radius: 6px;\n    display: inline-grid;\n}\n`;\n\nexport const ButtonUser = styled.button`\n  background-image: linear-gradient(\n    to right,\n    #5c258d 0%,\n    #4389a2 51%,\n    #5c258d 100%\n  );\n  margin: 10px;\n  padding: 15px 45px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  border-radius: 15px;\n  border: none;\n  &:hover,\n  &:focus {\n    box-shadow: 0 5px 10px 2px rgb(0 0 0 / 55%);\n  }\n`;\n\nexport const LabellUser = styled.label`\n  margin: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const InputUser = styled.input`\n  margin: 0px 30px 0px 15px;\n  padding: 0.5rem;\n  border: double 3px transparent;\n  border-radius: 6px;\n  background-image: linear-gradient(white, white),\n    linear-gradient(to right, #de005e, #5335cf);\n  background-origin: border-box;\n  background-clip: padding-box, border-box;\n`;\n// linear-gradient(\n//       135deg,\n//       #5335cf 0%,\n//       #de005e 25%,\n//       #f66e48 50%,\n//       #de005e 75%,\n//       #5335cf 100%\n//     );\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const contactsFiltered = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { Form as FormikForm } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const FormPhone = styled(FormikForm)`\n  background: linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%);\n  color: black;\n  font-size: 1.5rem;\n  list-style-type: none;\n  list-style-type: none;\n  text-align: center;\n  padding: 12px 18px;\n  max-width: 650px;\n  margin: 0 auto;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 2px 0px;\n`;\n\nexport const AddButton = styled.button`\n  width: 100px;\n  color: black;\n  border-radius: 10px;\n  border: none;\n  height: 30px;\n  margin-left: 20px;\n  background: #d8d8d8;\n  :hover {\n    color: white;\n    box-shadow: 0 5px 10px 2px rgb(0 0 0 / 25%);\n    background: linear-gradient(-225deg, #b7f8db 0%, #50a7c2 100%);\n  }\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContacts } from 'redux/operation';\nimport { selectContacts } from 'redux/selector';\nimport { nanoid } from 'nanoid';\nimport { PropTypes } from 'prop-types';\nimport { Formik } from 'formik';\nimport { FormPhone, AddButton } from './Phone.styled';\nimport { InputUser, LabellUser } from '../authForms/authForms.styled';\n\nexport default function PhoneForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contact = {\n      name: e.currentTarget.elements.name.value,\n      number: e.currentTarget.elements.number.value,\n    };\n\n    const currentName = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (currentName) {\n      console.log(currentName);\n      alert(`${currentName.name} is already exist!`);\n      return;\n    }\n\n    dispatch(addContacts(contact));\n\n    e.target.reset();\n  };\n\n  return (\n    <Formik>\n      <FormPhone onSubmit={handleSubmit} name=\"contact\">\n        <LabellUser htmlFor={nameId}>\n          Name\n          <InputUser\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </LabellUser>\n        <LabellUser htmlFor={numberId}>\n          Number\n          <InputUser\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </LabellUser>\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </FormPhone>\n    </Formik>\n  );\n}\n\nPhoneForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n// class PhoneForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//   }\n// }\n\n// export default PhoneForm;\n","import styled from '@emotion/styled';\n\nexport const TitileSection = styled.h2`\n  font-size: 34px;\n  color: #494949;\n  place-items: center;\n  justify-content: center;\n  display: flex;\n`;\n","import PropTypes from 'prop-types';\nimport { TitileSection } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <TitileSection>{title}</TitileSection>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import styled from '@emotion/styled';\n\nexport const FilterForm = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  background: linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%);\n  color: black;\n  font-size: 18px;\n  list-style-type: none;\n  text-align: center;\n  padding: 12px 18px;\n  max-width: 650px;\n  margin: 20px;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 2px 0px;\n`;\n\nexport const FilterInput = styled.input`\n  margin-left: 10px;\n  padding: 5px;\n  border: double 3px transparent;\n  border-radius: 6px;\n  background-image: linear-gradient(white, white),\n    linear-gradient(to right, #de005e, #5335cf);\n  background-origin: border-box;\n  background-clip: padding-box, border-box;\n`;\n","import { PropTypes } from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setNameFilter } from 'redux/filterSlice';\nimport { nanoid } from 'nanoid';\nimport { FilterForm, FilterInput } from './Filter.styled';\n\nconst ContactFilter = () => {\n  const filterId = nanoid();\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => {\n    const value = e.target.value;\n    dispatch(setNameFilter(value));\n  };\n\n  return (\n    <FilterForm>\n      <label htmlFor={filterId}>Find contacts by name</label>\n      <FilterInput\n        type=\"text\"\n        id={filterId}\n        onChange={onFilterChange}\n        name=\"filter\"\n      />\n    </FilterForm>\n  );\n};\n\nContactFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ContactFilter;\n","import styled from '@emotion/styled';\n\nexport const PhoneBook = styled.ul`\n  background: linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%);\n  color: black;\n  font-size: 1rem;\n\n  list-style-type: none;\n  text-align: center;\n  padding: 12px 18px;\n  max-width: 650px;\n  margin: 0 auto;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 2px 0px;\n`;\n\nexport const NewContact = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 10px;\n`;\n\nexport const DelButton = styled.button`\n  width: 80px;\n  color: #5a5a5a;\n  background-color: #fafafa;\n  border-radius: 10px;\n  border: none;\n  height: 30px;\n  margin-left: 10px;\n  margin-top: 10px;\n    &:hover,\n    &:focus {\n      box-shadow: 0 5px 10px 2px rgb(0 0 0 / 25%);\n      background: linear-gradient(\n        to right,\n        rgb(242, 112, 156),\n        rgb(255, 148, 114)\n      );\n      background-size: 200%;\n      color: #fff;\n      cursor: pointer;\n`;\n","import React from 'react';\nimport { removeContacts } from 'redux/operation';\nimport { PropTypes } from 'prop-types';\nimport { DelButton } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <span key={id}>\n      {name}: {number}\n      <DelButton type=\"button\" onClick={() => dispatch(removeContacts(id))}>\n        Delete\n      </DelButton>\n    </span>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { PropTypes } from 'prop-types';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectIsLoading, selectError, contactsFiltered } from 'redux/selector';\nimport { fetchContacts } from 'redux/operation';\nimport { PhoneBook, NewContact } from './Contact.styled';\nimport Loader from '../Loader/Loader';\nimport { Contact } from './NewContact';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(contactsFiltered);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {!isLoading && !error ? (\n        <PhoneBook>\n          {contacts.map(({ id, name, number }) => (\n            <NewContact key={id}>\n              <Contact id={id} name={name} number={number}></Contact>\n            </NewContact>\n          ))}\n        </PhoneBook>\n      ) : (\n        <Loader></Loader>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n\n// export const ContactList = ({ items, onDelete }) => (\n//   <PhoneBook>\n//     {items.map(({ id, name, number }) => (\n//       <NewContact key={id}>\n//         {name}: {number}\n//         <DelButton type=\"button\" onClick={() => onDelete(id)}>\n//           Delete\n//         </DelButton>\n//       </NewContact>\n//     ))}\n//   </PhoneBook>\n// );\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operation';\n// import { getError, getIsLoading } from 'redux/selector.js';\nimport PhoneForm from '../components/PhoneForm/PhoneForm';\nimport Section from '../components/Section/Section';\nimport ContactFilter from '../components/Filter/ContactsFilter';\nimport ContactList from '../components/Contacts/ContactList';\n\nconst Contscts = () => {\n  const dispatch = useDispatch();\n  //   const isLoading = useSelector(getIsLoading);\n  // const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Section>\n      <div title=\"Phonebook\">\n        <PhoneForm />\n        {/* {isLoading && !error && <b>Request in progress...</b>} */}\n      </div>\n      <div title=\"Contacts\">\n        <ContactFilter />\n        <ContactList />\n      </div>\n    </Section>\n  );\n};\n\nexport default Contscts;\n"],"names":["FormUser","styled","FormikForm","ButtonUser","LabellUser","InputUser","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","contactsFiltered","filter","contact","toLowerCase","includes","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormPhone","AddButton","PhoneForm","useSelector","dispatch","useDispatch","nameId","numberId","onSubmit","e","preventDefault","currentTarget","elements","number","currentName","console","log","alert","addContacts","target","reset","htmlFor","type","pattern","title","required","TitileSection","children","FilterForm","FilterInput","filterId","onChange","setNameFilter","PhoneBook","NewContact","DelButton","Contact","onClick","removeContacts","useEffect","fetchContacts","Loader"],"sourceRoot":""}